setwd("/home/jose/Universidad/DataScience/CART/lab1/data/")
spam = read.table('spam.txt')
# This colnames dont make any sense to me
colnames(spam) = c('crl.tot','dollar','banj','money','nooo','make','yesno')
library(rpart)
# Create the max tree
treemax = rpart(yesno~., data=spam, control=rpart.control(minsplit=1, cp=10^(-15)))
# Will return the vector of posterior probability for each modality,
# as there is a qualitative variable.
predict(treemax)
# Divide in training and test sets
# Optionally, we can set a seed in order to always get the same 'random' sampling
# set.seed(1274)
train.sample = sample(nrow(spam), floor(nrow(spam)*(2/3)))
spam.train = spam[train.sample,]
spam.test  = spam[-train.sample,]
# Create the max tree using the training set
treemax = rpart(yesno~., data=spam.train, control=rpart.control(minsplit=1, cp=10^(-15)))
# Make predictions on the test set
pred = predict(treemax, newdata=spam.test, type="class")
# Confusion matrix
cm = table(spam.test$yesno, pred)
err.test = 1 - (cm[1,1] + cm[2,2])/sum(cm)
# Could be done like this
# err.test = (cm[1,2] + cm[2,1])/sum(cm)
# but it's easier to do it this way in case the confusion matrix is bigger than 2x2
# Or, alternatively
# err.test = sum(spam.test$yesno != pred)/length(spam.test$yesno)
# Create the max tree
treemax = rpart(yesno~., data=spam, control=rpart.control(minsplit=1, cp=10^(-15)))
# Will return the vector of posterior probability for each modality,
# as there is a qualitative variable.
predict(treemax)
# As we want the predicted class, and not the probab for each modality,
# we jsut have to set the type of prediction
pred = rpart.predict(treemax, type="class")
plotcp(treemax)
printcp
printcp(treemax)
cp = printcp(treemax)
plotcp(treemax)
cp
cp[0,]
cp[,0]
which(cp[,5] > min(cp[,5])+min(cp[,6]))
which(cp[,4] > min(cp[,4])+min(cp[,5]))
which(cp[,4] < min(cp[,4])+min(cp[,5]))
which(cp[,4] < min(cp[,4])+min(cp[,5]))[0]
cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),][0]
cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),]
cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),0]
cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),0][,0]
a = cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),0]
a
a[0,]
a[0,0]
a
View(a)
View(a)
a[0]
a[[0]]
a[[]]
cp
which(cp[,4] < min(cp[,4])+min(cp[,5]))
cp[1,]
cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),]
a = cp[which(cp[,4] < min(cp[,4])+min(cp[,5])),]
View(a)
View(a)
cp
?min
which(min(cp[4,]))
min(cp[4,])
min(cp[4,])
which(cp[4,] == min(cp[4,])
)
a = cp[,4]
min(a)
whichmin(a)
which(cp[,4] == min(cp[,4])
)
which(cp[,4] == min(cp[,4]))[0]
which(cp[,4] == min(cp[,4]))[0,]
which(cp[,4] == min(cp[,4]))
head(which(cp[,4] == min(cp[,4])),1)
i = c(TRUE, FALSE)
i
i*1
# Function to find the cp param
selection <- function(tree){
pcp = printcp(tree)
# Threshold = minimum(xerr) + it's std
min.xerr = which(pcp[,4] == min(pcp[,4]))
t = pcp[min.xerr,4] + pcp[min.xerr,5]
# There could be more than one value, so we choose the minimum
threshold = t[which(t == min(t))[1]]
# Multiply by 1 to turn booleans into ints
a = (pcp[,4] <= threshold)*1
cp = pct[which(a == 1)[1],1]
}
selection(treemax)
# Function to find the cp param
selection <- function(tree){
pcp = printcp(tree)
# Threshold = minimum(xerr) + it's std
min.xerr = which(pcp[,4] == min(pcp[,4]))
t = pcp[min.xerr,4] + pcp[min.xerr,5]
# There could be more than one value, so we choose the minimum
threshold = t[which(t == min(t))[1]]
# Multiply by 1 to turn booleans into ints
a = (pcp[,4] <= threshold)*1
cp = pcp[which(a == 1)[1],1]
}
selection(treemax)
pcp = printcp(treemax)
# Threshold = minimum(xerr) + it's std
min.xerr = which(pcp[,4] == min(pcp[,4]))
t = pcp[min.xerr,4] + pcp[min.xerr,5]
# There could be more than one value, so we choose the minimum
threshold = t[which(t == min(t))[1]]
# Multiply by 1 to turn booleans into ints
a = (pcp[,4] <= threshold)*1
cp = pcp[which(a == 1)[1],1]
a
which(a == 1)[1]
pcp[which(a == 1)[1],]
pcp[which(a == 1)[1],1]
selection(treemax)
# Function to find the cp param
selection <- function(tree){
pcp = printcp(tree)
# Threshold = minimum(xerr) + it's std
min.xerr = which(pcp[,4] == min(pcp[,4]))
t = pcp[min.xerr,4] + pcp[min.xerr,5]
# There could be more than one value, so we choose the minimum
threshold = t[which(t == min(t))[1]]
# Multiply by 1 to turn booleans into ints
a = (pcp[,4] <= threshold)*1
cp = pcp[which(a == 1)[1],1]
}
a = selection(treemax)
a
b = printcp(treemax)
cp = selection(treemax)
tree.selected = prune(treemax, cp)
plot(treemax)
X11()
T = rpart(yesno~., data=spam)
plot(T)
text(T)
summary(T)
